
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "RNPermissionsSpec.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_canScheduleExactAlarms(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "canScheduleExactAlarms", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_canUseFullScreenIntent(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "canUseFullScreenIntent", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_check(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "check", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_checkLocationAccuracy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "checkLocationAccuracy", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_checkMultiple(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "checkMultiple", "(Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_checkNotifications(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "checkNotifications", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_openPhotoPicker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "openPhotoPicker", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_openSettings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "openSettings", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_request(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "request", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_requestLocationAccuracy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "requestLocationAccuracy", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_requestMultiple(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "requestMultiple", "(Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_requestNotifications(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "requestNotifications", "(Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNPermissionsSpecJSI_shouldShowRequestRationale(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "shouldShowRequestRationale", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

NativeRNPermissionsSpecJSI::NativeRNPermissionsSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["canScheduleExactAlarms"] = MethodMetadata {0, __hostFunction_NativeRNPermissionsSpecJSI_canScheduleExactAlarms};
  methodMap_["canUseFullScreenIntent"] = MethodMetadata {0, __hostFunction_NativeRNPermissionsSpecJSI_canUseFullScreenIntent};
  methodMap_["check"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_check};
  methodMap_["checkLocationAccuracy"] = MethodMetadata {0, __hostFunction_NativeRNPermissionsSpecJSI_checkLocationAccuracy};
  methodMap_["checkMultiple"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_checkMultiple};
  methodMap_["checkNotifications"] = MethodMetadata {0, __hostFunction_NativeRNPermissionsSpecJSI_checkNotifications};
  methodMap_["openPhotoPicker"] = MethodMetadata {0, __hostFunction_NativeRNPermissionsSpecJSI_openPhotoPicker};
  methodMap_["openSettings"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_openSettings};
  methodMap_["request"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_request};
  methodMap_["requestLocationAccuracy"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_requestLocationAccuracy};
  methodMap_["requestMultiple"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_requestMultiple};
  methodMap_["requestNotifications"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_requestNotifications};
  methodMap_["shouldShowRequestRationale"] = MethodMetadata {1, __hostFunction_NativeRNPermissionsSpecJSI_shouldShowRequestRationale};
}

std::shared_ptr<TurboModule> RNPermissionsSpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "RNPermissions") {
    return std::make_shared<NativeRNPermissionsSpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
